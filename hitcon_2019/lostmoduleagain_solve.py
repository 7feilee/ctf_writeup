from Crypto.Util.number import *
from Crypto.Util.number import long_to_bytes,bytes_to_long
import sympy as sym
import gmpy2

class Key:
    def __init__(self, bits):
        assert bits >= 512
        self.p = getPrime(bits)
        self.q = getPrime(bits)
        self.n = self.p * self.q
        self.e = 0x100007
        self.d = inverse(self.e, (self.p-1)*(self.q-1))
        self.dmp1 = self.d%(self.p-1)
        self.dmq1 = self.d%(self.q-1)
        self.iqmp = inverse(self.q, self.p)
        self.ipmq = inverse(self.p, self.q)

    def encrypt(self, data):
        num = bytes_to_long(data)
        result = pow(num, self.e, self.n)
        return long_to_bytes(result)

    def decrypt(self, data):
        num = bytes_to_long(data)
        v1 = pow(num, self.dmp1, self.p)
        v2 = pow(num, self.dmq1, self.q)
        result = (v2*self.p*self.ipmq+v1*self.q*self.iqmp) % self.n
        return long_to_bytes(result)

    def __str__(self):
        return "Key([e = {0}, d = {1},n = {2}, x = {3}, y = {4}])".format(self.e, self.d,self.n, self.iqmp, self.ipmq)
e = 1048583
d = 20899585599499852848600179189763086698516108548228367107221738096450499101070075492197700491683249172909869748620431162381087017866603003080844372390109407618883775889949113518883655204495367156356586733638609604914325927159037673858380872827051492954190012228501796895529660404878822550757780926433386946425164501187561418082866346427628551763297010068329425460680225523270632454412376673863754258135691783420342075219153761633410012733450586771838248239221434791288928709490210661095249658730871114233033907339401132548352479119599592161475582267434069666373923164546185334225821332964035123667137917080001159691927
x = 22886390627173202444468626406642274959028635116543626995297684671305848436910064602418012808595951325519844918478912090039470530649857775854959462500919029371215000179065185673136642143061689849338228110909931445119687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743
y = 138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331

print(e*d//(pow(2,1024)*pow(2,1024)))
kmin = 678124
kmax = 2712497
p = sym.Symbol('p')
q = sym.Symbol('q')
# factor(e*d -1) 2^5 · 3^5 · 5 · 13 · 31 · 47 · 331 · 449 · 1381 · 37693
res = [678474, 681876, 697086, 700065, 700440, 708102, 718120, 723788, 727380, 738792, 742365, 743095, 745740, 751626, 753860, 757640, 759708, 770598, 774540, 778884, 783432, 786780, 787995, 800358, 804330, 807885, 808964, 823017, 831141, 835140, 840078, 843791, 844120, 852345,856220, 872856, 891714, 894888, 904632, 904735, 914222, 923490, 929448, 933420, 944136, 945594, 949635, 964534, 969462, 973605, 979290, 980018, 989820, 1002168, 1011205, 1017711, 1022814, 1027464, 1045629, 1050660, 1067144, 1072440, 1077180, 1085682, 1091070, 1097356, 1108188, 1113086, 1118610, 1120104, 1127439, 1130790, 1136460, 1139562, 1155897, 1161810, 1168326, 1168483, 1180170, 1187784, 1188952, 1200537, 1213446, 1231320, 1240138, 1252710, 1260117, 1260792, 1266180, 1284330, 1292616, 1298140, 1305720, 1308386, 1333930, 1337571, 1342332, 1356948, 1363752, 1371333, 1371695, 1385235, 1394172, 1400130, 1416204, 1418391, 1446801, 1447576, 1454193, 1454760, 1470027, 1484730, 1486190, 1491480, 1503252, 1507720, 1519416, 1534221, 1541196, 1549080, 1557768, 1573560, 1575990, 1600716, 1608660, 1615770, 1617928, 1628523, 1646034, 1662282, 1669629, 1670280, 1677915, 1680156, 1687582, 1696185, 1704690, 1709343, 1712440, 1742715, 1752489, 1770255, 1771571, 1783428, 1809470, 1820169, 1828444, 1846980, 1860207, 1866840, 1879065, 1891188, 1899270, 1926495, 1929068, 1932047, 1938924, 1947210, 1958580, 1960036, 1962579, 1979640, 2000895, 2012117, 2022410, 2035422, 2045628, 2091258, 2100195, 2101320, 2154360, 2171364, 2182140, 2194712, 2216376, 2226172, 2229285, 2237220, 2254878, 2261580, 2272920, 2279124, 2285555, 2311794, 2323620, 2336652, 2336966, 2360340, 2363985, 2401074, 2411335, 2423655, 2426892, 2450045, 2469051, 2480276, 2493423, 2505420, 2520234, 2531373, 2532360, 2557035, 2568660, 2596280, 2616772, 2667860, 2675142, 2684664]
for k in res:
        solution = sym.solve((x*q*q-(p*q+1)*q+y*(p*q),e*d-k*(p-1)*(q-1)-1), (p, q))
        for loop in solution:
            a,b = loop
            if a > 0 and b > 0:
                print("found: ",a,b)
p = 135136928230019073146158752709151576119155564982754768027494878210491711363872928718225319693774548227271767324623087432404412585662574641211148315864508708036871556964386141364368797168619283425834644924573664613109609076319077176698754203574237779054129492453503018443013301394555677417140681949745410143477
q = 166564961597106229342966450443567005929416288372170308009700499465281616388542030734600089639466922805142577582894052957547174764252067983124558747593344882775630971023610755334859287415681252266825395627416912206349590353878868107848653100299011246746851490276537231636534462821659050996145878589643016881929
print(long_to_bytes(pow(int(c,16),d,(p*q))))
# hitcon{1t_is_50_easy_t0_find_th3_modulus_back@@!!@!@!@@!}
