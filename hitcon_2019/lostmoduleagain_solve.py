from Crypto.Util.number import *
from Crypto.Util.number import long_to_bytes,bytes_to_long

class Key:
    def __init__(self, bits):
        assert bits >= 512
        self.p = getPrime(bits)
        self.q = getPrime(bits)
        self.n = self.p * self.q
        self.e = 0x100007
        self.d = inverse(self.e, (self.p-1)*(self.q-1))
        self.dmp1 = self.d%(self.p-1)
        self.dmq1 = self.d%(self.q-1)
        self.iqmp = inverse(self.q, self.p)
        self.ipmq = inverse(self.p, self.q)

    def encrypt(self, data):
        num = bytes_to_long(data)
        result = pow(num, self.e, self.n)
        return long_to_bytes(result)

    def decrypt(self, data):
        num = bytes_to_long(data)
        v1 = pow(num, self.dmp1, self.p)
        v2 = pow(num, self.dmq1, self.q)
        result = (v2*self.p*self.ipmq+v1*self.q*self.iqmp) % self.n
        return long_to_bytes(result)

    def __str__(self):
        return "Key([e = {0}, d = {1},n = {2}, x = {3}, y = {4}])".format(self.e, self.d,self.n, self.iqmp, self.ipmq)
e = 1048583
d = 20899585599499852848600179189763086698516108548228367107221738096450499101070075492197700491683249172909869748620431162381087017866603003080844372390109407618883775889949113518883655204495367156356586733638609604914325927159037673858380872827051492954190012228501796895529660404878822550757780926433386946425164501187561418082866346427628551763297010068329425460680225523270632454412376673863754258135691783420342075219153761633410012733450586771838248239221434791288928709490210661095249658730871114233033907339401132548352479119599592161475582267434069666373923164546185334225821332964035123667137917080001159691927
x = 22886390627173202444468626406642274959028635116543626995297684671305848436910064602418012808595951325519844918478912090039470530649857775854959462500919029371215000179065185673136642143061689849338228110909931445119687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743
y = 138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331
print(len(bin(d)))
# print(Key(1024).__str__())
p = getPrime(1024)
q = getPrime(1024)
invq = inverse(q,p)
invp = inverse(p,q)
print((p*invp + q*invq)//(p*q))
print(gmpy2.gcd(x,y))
print((p*invp//q)*(q*invq//p)-(p*q))
print(invq)
# [e = 1048583, d = 12011807782559437006668194913331489805131814612978073376347039903607605146322928985435021608375678157563836992312755295461375652485980494821945987118182985433893983071742746052312500274686340656254219242054721177920842351011419188532862830951008529592297015838728994940291086656608866019246889015494632173561888020400653249290964904807857757776944483923832393801455001742725784804738199246143217177520786717484178612800518427659062258023315518677302018135655300780841426703264001102755975789957072513971417173402258029434200490337227387824498072178412771180623468452572733465861626014486624683376945552230401116055643,n = 16320054523881403126000981929668274964704043238517526675836169629210368109724926687425462231997483365565730966113463267023821338412599151825576418208910741131432240375495416247746420871851473353378542622625390752083540931012884574828809644632685228668895623142066340363649996203089372855826727061628753387913613849007393951070804317887178939046241596714664540125166387975099890680882789276497560807242250535234081457722715522215356627540084231812137538196730569293858898158141651393276815969491526294561286360318864053880290288791359531091239163007272101636455281949638575201425230724784590006389792343958894566316677, x = 48373023828598760387918454564789356544407904631906844397061612381444206493585872045214797679972758802495461420188367164859805634203260836621638700163529933025984142130884423729416119266055688043924198616980767760149564227406029640927369521403201637028718658220387305584107735837638916694547704621221211596178, y = 84067043073889497992558476505215978187081972123648267555603443263258240408624151951940703276108067665438330382272622859854970121495723852876191564110310037350616046461549527395199300577011931474711620201426664955231023032769626554980403082483822622981366791381898505324781008602222374587005045479941916744816]
print(e*d//(pow(2,1024)*pow(2,1024)))
kmin = 678124
kmax = 2712497
print((x-1)*(y-1))
# factor(e*d -1) 2^5 · 3^5 · 5 · 13 · 31 · 47 · 331 · 449 · 1381 · 37693
for k in res:
        solution = sym.solve((x*q*q-(p*q+1)*q+y*(p*q),e*d-k*(p-1)*(q-1)-1), (p, q))
        for loop in solution:
            a,b = loop
            if a > 0 and b > 0:
                print("found: ",a,b)
p = 135136928230019073146158752709151576119155564982754768027494878210491711363872928718225319693774548227271767324623087432404412585662574641211148315864508708036871556964386141364368797168619283425834644924573664613109609076319077176698754203574237779054129492453503018443013301394555677417140681949745410143477
q = 166564961597106229342966450443567005929416288372170308009700499465281616388542030734600089639466922805142577582894052957547174764252067983124558747593344882775630971023610755334859287415681252266825395627416912206349590353878868107848653100299011246746851490276537231636534462821659050996145878589643016881929
print(long_to_bytes(pow(int(c,16),d,(p*q))))
# hitcon{1t_is_50_easy_t0_find_th3_modulus_back@@!!@!@!@@!}
