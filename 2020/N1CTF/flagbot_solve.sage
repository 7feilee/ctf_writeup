from hashlib import sha256
from Crypto.Cipher import AES
from Crypto.Util.number import long_to_bytes, bytes_to_long
import base64

Ps = []
As = []
Bs = []
Gs = []
S_pubs = []
R_pubs = []
P = 66116745352204681519469100961724220561156687225236967561841501424810928307807
A = 25080904022674360699928001742955972930647134245095368243176041782631007842721
B = 51653146499008013562938728057440216556983928277479897024444219497340655463785
g = (63081569813401008552324671243982371480394903382778267836374074361871201577834, 23474141625196059564605908362235632708979984522174825228263753550289099376123)
S_pub = (24019555976552900590169231571461552054483009204136674938458250215680500736104, 28011367537644480596653140995440810446354950450235617877156869800605294049216)
R_pub = (21964916650662314987863240651434170404291932859105698307245034338578258435153, 35342442175625429390144720170949410218699162882078535647858248442359306505200)
Ps.append(P)
As.append(A)
Bs.append(B)
Gs.append(g)
S_pubs.append(S_pub)
R_pubs.append(R_pub)

A = 2043815101359890065237307309939296857003577532583569338661660469466065827348
B = 102067006665666390630291837887546295447695223287490132072379307910043009809365
P = 113695419170059566479346310029048094168019545028712145271916973344605708411231
g = (20423141275809893159167255142239866844060625870997452377601981868107180347177, 19992442879371504373024138247445104476473382515298680276871238677864732873443)
S_pub = (20441117040475832878884881554942470687198039971240520739479757559219246872653, 45246074815149735681764719655664095933149602519570537420221414480297443431660)
R_pub = (83790456887960986270075993688251061667028849061705590683529854218000565384653, 37034086787952126250768442161874707448314299329519714523930420666430617617436)
Ps.append(P)
As.append(A)
Bs.append(B)
Gs.append(g)
S_pubs.append(S_pub)
R_pubs.append(R_pub)

A = 65648683508174640005634659396734789146850512565992025130433731687468428014179
B = 26272780223380324248552131058359547612836533364530177350421100387341037019139
P = 83896367993822828206543253354724494500260288857736562669184182628538083809367
g = (66637030276058391005466451194860659717163350367470416781614482222291041550445, 42130578561329742617661868751583766503456310634248769620710117199609280153951)
S_pub = (925254032087886664320524398426659165460688490381753543166449423088972289752, 34161936287534442440574848409277776704051339550136374930448045799102091304385)
R_pub = (77487783629582269393021073745111288030731815996077926643703967191623342061769, 17069968312494305342308603449255126232649317598681866690930793862460244213073)
Ps.append(P)
As.append(A)
Bs.append(B)
Gs.append(g)
S_pubs.append(S_pub)
R_pubs.append(R_pub)

A = 45714287149662768031120362703352163808283687329364642685969786161037988402322
B = 13490438512144550503686574382307330330369767336370722471096599302102081052907
P = 84408463109891431539543683776163072259768663955147054397339555539484223860849
g = (6570681797979574798980058367762289163101761416726999337302555519117884193133, 84131903756864767816718674235096921776761058318540805902656635647097220746176)
S_pub = (13984502094770046374464253413876930620949304198826997187733768160077642199799, 76189432959768786280656878273218310462258843058909625672800249356146578715552)
R_pub = (66339630562478902835064454239513349141968311524235298057869638961815582849128, 69534588539297217995844040255917991799369119615551739810039109593443850878629)
Ps.append(P)
As.append(A)
Bs.append(B)
Gs.append(g)
S_pubs.append(S_pub)
R_pubs.append(R_pub)

A = 62223277804445341254787981117021600074420157388064163010607145435104547417397
B = 34707768442186125131806569005593351434199621336955141175747334384779700268005
P = 89828857550588499041754475095787311033679358237685956741247265953298714723687
g = (34259562830800168427768937337523005601956109650950692560887503779629450207546, 59537565415508947262456971121016634323997129438307627449854610945426322682741)
S_pub = (18674993449005014174961788230324741554553064950594321248138769231475404529578, 59930549653627690834693291622117932519282699095911346563631008466579071303426)
R_pub = (84427573767999694146343716722966630014125985662568809331346918240571426153974, 76200263668439011398104250477377669952492636799284201541132987822897834262205)
Ps.append(P)
As.append(A)
Bs.append(B)
Gs.append(g)
S_pubs.append(S_pub)
R_pubs.append(R_pub)

A = 6337991232311655881887193909687709244219846533018968166917954811344714846066
B = 78122417324315819522754419456195999300938035298934025516545906232290029817169
P = 82544632586959503132766613901425519954811832603382905418700501867183631299857
g = (61666697446814016414589934733724006272024805116115169616762303794869830135004, 59765716632865814863135920288941972023872535929772755998052459642763576842072)
S_pub = (14257092299382249876113216794843385700363061125668985733880785860525545219476, 18042157168209341016333130324332590121081457687400293942816847797124074413866)
R_pub = (80496585248649931726055729281461283918359195227194884653047120814020506698876, 49260872234715775168440284736509529858327755952997635954628424325517623888795)
Ps.append(P)
As.append(A)
Bs.append(B)
Gs.append(g)
S_pubs.append(S_pub)
R_pubs.append(R_pub)

A = 7403894190458165962231103292957170939506045762430202131193681466982830965756
B = 28082358492257355502989846048067008405688147223381838582915838704597222383734
P = 73686745743965275836733554459385219570128908432394569325825918375480977933431
g = (46903230973099695924304295095696738305010395820826985689804239955539011384634, 69482437544400948021814998583755682054581126133090152647261459868866067367682)
S_pub = (29313916694388937464203037295444584421266117814196799108742785455912142615392, 20695090655307032585729557746989704351847975924796772990704232701677433061651)
R_pub = (29026045737941774790225880629738838945562985655792675197636939163425922027279, 5584630534514060042418045368230327886310494046416201051561254041131025362185)
Ps.append(P)
As.append(A)
Bs.append(B)
Gs.append(g)
S_pubs.append(S_pub)
R_pubs.append(R_pub)

dlogs = []
primes = []
# The Pohlig-Hellman attack
for i in range(7):
    E = EllipticCurve(FiniteField(Ps[i]),[As[i],Bs[i]])
    factors, exponents = zip(*factor(E.order()))
    
#     assert Ps[i] != E.order() # Check Smart's Attack where #E(Fp) = p

    P = E.point(Gs[i])
    Q = E.point(S_pubs[i])
    factors, exponents = zip(*factor(E.order()))
    prime = [factors[i] ^ exponents[i] for i in range(len(factors))][:-1]
    for fac in prime:
        if fac % 2 == 0 or fac in primes:
            continue
        if fac > 2**37:
            break
        t = int(P.order()) // int(fac)
        tQ = t*Q
        tP = t*P
        dlog = tP.discrete_log(tQ)
        dlogs += [dlog]
        primes += [fac]
        print("[+] factor: "+str(fac)+", Discrete Log: "+str(dlog))
secret = crt(dlogs,primes)
print("[+] secret: ", secret)

def receive(shared_secret, encrypted_msg):
    px = shared_secret.xy()[0]
    _hash = sha256(long_to_bytes(px)).digest()
    key = _hash[:16]
    iv = _hash[16:]
    msg = AES.new(key, AES.MODE_CBC, iv).decrypt(base64.b64decode(encrypted_msg))
    print(msg)
    assert msg.startswith(b'Hi, here is your flag: ')

encrypted_msg =[None for _ in range(7)]
encrypted_msg[0] = b'AphuswakJ9tm3U4RgxglCND0791F19eDYXjolhKnePtSNScGR+0KDtZ30SEY5QTZvYak0pW2nACbUDIKAUsW7g=='
encrypted_msg[1] = b'pLwfQu73KvkuKxtAX6sIfu6tw99n8LplGn+EskG5H/16Mta3MK1Qn7DjASQb6saI9C9kRxb0QbGsfXL91gjYjQ=='
encrypted_msg[2] = b'TlqpzSuIDZGmNjOEkoEuRkzi0Nqrwnq2ANn/yrE3jPfj3kmEycnnN6miugEJ8cHI7f1xdb5GAOA8gOt2d7gKWg=='
encrypted_msg[3] = b'bvVz/owqkE1ng3w0eKTM9g/UgYqVhmf8kiu1zqgOXDIbC2XkM6muWH8DcDKE62L+I4fmwxqJQUX+N+BZ9PnbfA=='
encrypted_msg[4] = b'nER87UIiJmA4VldFuc4m89Q5IGWSVqYPJ5/WaKe5SgsRQLvxvSaAwjie3LAcZ7glsaXknKDuQqfDfs6+D6PlSg=='
encrypted_msg[5] = b'0/+rIOFeezX/7QmYpUYCQpbtgzPTPYevlP6pxMt1iIPNY1erz+nHYzbvTnZe8EF5BK+2iSQ9+P7QfpHwzE+tSA=='
encrypted_msg[6] = b'fYYFLvkUHhdXhn7d9SeBP27FINItbBFa2J/MSGhN82QnFoz1DJCIYbzIHVkTtoeMM77srcFMb9+YYk0nzqcvVg=='
for i in range(0,7):
    E = EllipticCurve(FiniteField(Ps[i]),[As[i],Bs[i]])
    P = E.point(Gs[i])
    Q = E.point(S_pubs[i])
    R = E.point(R_pubs[i])
    shared_secret = secret*R
    receive(shared_secret,encrypted_msg[i])
#n1ctf{0ops_I_R3used_7h3_S4M3_Pr1vK3y}