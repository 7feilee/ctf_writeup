N =  24402191928494981635640497435944050736451453218629774561432653700273120014058697415669445779441226800209154604159648942665855233706977525093135734838825433023506185915211877990448599462290859092875150657461517275171867229282791419867655722945527203477335565212992510088077874648530075739380783193891617730212062455173395228143660241234491822044677453330325054451661281530021397747260054593565182679642519767415355255125571875708238139022404975788807868905750857687120708529622235978672838872361435045431974203089535736573597127746452000608771150171882058819685487644883286497700966396731658307013308396226751130001733
e1 = 4046316324291866910571514561657995962295158364702933460389468827072872865293920814266515228710438970257021065064390281148950759462687498079736672906875128944198140931482449741147988959788282715310307170986783402655196296704611285447752149956531303574680859541910243014672391229934386132475024308686852032924357952489090295552491467702140263159982675018932692576847952002081478475199969962357685826609238653859264698996411770860260854720047710943051229985596674736079206428312934943752164281391573970043088475625727793169708939179742630253381871307298938827042259481077482527690653141867639100647971209354276568204913
e2 =  1089598671818931285487024526159841107695197822929259299424340503971498264804485187657064861422396497630013501691517290648230470308986030853450089582165362228856724965735826515693970375662407779866271304787454416740708203748591727184057428330386039766700161610534430469912754092586892162446358263283169799095729696407424696871657157280716343681857661748656695962441400433284766608408307217925949587261052855826382885300521822004968209647136722394587701720895365101311180886403748262958990917684186947245463537312582719347101291391169800490817330947249069884756058179616748856032431769837992142653355261794817345492723
cipher = 5089249888618459947548074759524589606478578815336059949176718157024022678024841758856813241335191315643869492784030633661717346809979076682611760035885176766380484743187692409876479000444892361744552075578050587677106211969169204446554196613453202059517114911102484740265052582801216204900709316109336061861758409342194372241877343837978525533125320239702501424169171652846761028157198499078668564324989313965631396082388643288419557330802071756151476264735731881236024649655623821974147680672733406877428067299706347289297950375309050765330625591315867546015398294367460744885903257153104507066970239487158506328863
# gmpy2.iroot(n,3)[0]
delta = 29005227725215799238097041741168636427834144546989585476013832972572933548628123495276629059735889617295402541730769791990553220937251748966268074846866845936049907485155339072202153045106298563325868450217

import random
txt = []
for i in range(0,1000):
    r = random.randint(delta,delta*0x1000000000001)
    d = gmpy2.next_prime(r)
    txt.append(len(bin(r))-2)
print(min(txt),max(txt))

prod = delta*0x1000000000001
print(len(bin(prod))-2)
print(len(bin(n))-2)
for i in range(721,731):
    alpha2 = i/2048.0
    M1 = int(gmpy2.mpz(N)**0.5)
    M2 = int( gmpy2.mpz(N)**(1+alpha2) )
    D = diagonal_matrix(ZZ, [N, M1, M2, 1])
    B = Matrix(ZZ, [ [1, -N,   0,  N**2],
                     [0, e1, -e1, -e1*N],
                     [0,  0,  e2, -e2*N],
                     [0,  0,   0, e1*e2] ]) * D

    L = B.LLL()

    v = Matrix(ZZ, L[0])
    x = v * B**(-1)
    phi = (x[0,1]/x[0,0]*e1).floor()
    PR = PolynomialRing(ZZ, 'x')
    x = PR.gen()
    f = x**2 - (N-phi+1)*x + N
    if f.roots():
        p, q = f.roots()[0][0], f.roots()[1][0]
        print(p,q)
# delta = gmpy2.iroot(int(n),3)[0]

p,q = 164656643539180925347475035876826907587199570943539307676762086404241326460063386893278258493073733978603659757523760170941847034546324084161431556008103796534759579880492223105993619977963949209840899400364222416468003629138981209521765041321074969084702038097657087959196212800443128569333895038438974561697, 148200469801805173393293666351607372373355407108901977655162799217476965765641914828652632883042889603392209499457062692550300804069662537252557699521765433687428676373988570114640055725138882946902538753625024080637967997887339080346556835117150732853847866272882186127502807796922777978933510533779340753189
cm = lcm(p-1,q-1)
d1 = inverse_mod(e1,cm)
d2 = inverse_mod(e2,cm)
from Crypto.Util.number import long_to_bytes,bytes_to_long
print(long_to_bytes(pow(cipher,d1,N)))
print(long_to_bytes(pow(cipher,d2,N)))
