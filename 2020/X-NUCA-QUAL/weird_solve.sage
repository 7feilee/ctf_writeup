#!/usr/bin/env sage

e, n = (288969517294013178236187423377607850772706067194956328319540958788120421760563745859661120809993097599452236235703456953461446476016483100948287481999230043898368061651387268308645842547879026821842863879967704742559469599469159759360184157244907772315674219466971226019794131421405331578417729612598931842872757269134756215101980595515566901217084629217607502582265295755863799167702741408881294579819035951888562668951997777236828957162036234849207438819692480197365737237130918496390340939168630111890207700776894851839829623749822549994705192645373973493114436603297829506747411555800330860323339168875710029679, 6321130275268755691320586594611921079666212146561948694592313061609721619539590734495630218941969050343046016393977582794839173726817429324685098585960482266998399162720208269336303520478867387042992449850962809825380612709067651432344409349798118550026702892042869238047094344883994914342037831757447770321791092478847580639207346027164495372017699282907858775577530313354865815011726710796887715414931577176850854690237886239119894136091932619828539390021389626283175740389396541552356118540397518601098858527880603493380691706649684470530670258670128352699647582718206243920566184954440517665446820063779925391893)
ct = (5899152272551058285195694254667877221970753694584926104666866605696215068207480540407327508300257676391022109169902014292744666257465490629821382573289737174334198164333033128913955350103258256280828114875165476209826215601196920761915628274301746678705023551051091500407363159529055081261677043206130866838451325794109635288399010815200512702451748093168790121961904783034526572263126354004237323724559882241164587153748688219172626902108911587291552030335170336301818195688699255375043513696525422124055880380071075595317183172843771015029292369558240259547938684717895057447152729328016698107789678823563841271755, 253027286530960212859400305369275200777004645361154014614791278682230897619117833798134983197915876185668102195590667437488411251835330785944874517235915807926715611143830896296709467978143690346677123639363900536537534596995622179904587739684155397043547262126131676366948937690378306959846311626889534352806134472610026603322329394769864728875293696851590640974817297099985799243285824842399573006841275494668451690794643886677303573329060084436896592291515021246248961538322485059619863786362159459122242131918702862396595818404578595841492379025543989260901540257216728185425462070297720884398220421012139424567)
d = (((ct[1])**2 - 1) * inverse_mod(((ct[1])**2 + 1) * (ct[0])**2, n)) % n
def multiply(P, n):
    Q = (0, 1)
    while n > 0:
        if n % 2 == 1:
            Q = add_points(Q, P)
        P = add_points(P, P)
        n = n//2
    return Q

def add_points(ct, pt):
# ax^2+y^2 = 1+dx^2y^2 #  twisted Edwards curves
# x3 = (x1*y2+y1*x2)/(1+d*x1*x2*y1*y2);
# y3 = (y1*y2-a*x1*x2)/(1-d*x1*x2*y1*y2);
    return (int((ct[0] * pt[1] + ct[1] * pt[0]) * inverse_mod(1 + d * ct[0] * pt[0] * ct[1] * pt[1], n) % n), int((ct[1] * pt[1] + d * ct[0] * pt[0]) * inverse_mod(1 - d * ct[0] * pt[0] * ct[1] * pt[1], n) % n) )
if __name__ == "__main__":
    cf = continued_fraction(e / n).convergents()
    for f in cf:
        y = f.numer()
        x = f.denom()
        if gcd(x, y) == 1 and (x * y) < (int(sqrt(2 * n)) // 12) and x.nbits() > 505 and y.nbits() > 505:
            p_add_q = (x * e) // y - 1 - n
            lr = (p_add_q + int(sqrt(p_add_q * p_add_q - 4 * n))) // 2
            P.<t> = PolynomialRing(Zmod(n), implementation='NTL')
            poly = lr + t
            x0 = poly.small_roots(X = 2 ** int(2048*0.21), beta = 0.41, epsilon = 0.03)
            if x0:
                p = int(gcd(lr+x0[0],n))
                q = n//int(p)
                assert p*q == n
            k = inverse_mod(e, (p + 1) * (q + 1))
            from Crypto.Util.number import long_to_bytes
            pt = multiply(ct, k)
            print(f"flag is :{long_to_bytes(pt[0])+long_to_bytes(pt[1])}")
# > flag is :b'X-NUCA{Youve_Forg0tt3n_th3_t4ste_0f_Rea1_h0ney_6f36940f714710af}'