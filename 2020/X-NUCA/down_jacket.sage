# solved after the ctf. need to understand small roots and how to construct small number polynomials.
N = 22162325516228645464615655061245473092136116786881925149483298798727453091248490986895977037121248103268792365405506564347340772747520269125056299001742555544578259703884716022154807698557136442299433692189336132144885444840306277896352952444030987472299196343936572617257293564420879382352166964501514648889823620102333051332629878779388408489014933018399418661117239218623199479635867250990569393229927298875552237158333176345722279090675304818515686072480269917927075372900585719150349749080299694632997515534564727633423300249908502406760542766194944815930529417504031904363129960085426117825849176254478060586931
Zn = Zmod(N)
R = PolynomialRing(Zn, 'X')
X = R.gen()
D = 2**200-1
f = X - ((N*D)//2**1020)
q = int(gcd(2**1020*f.small_roots(beta=0.5)[0] + (N*D)%2**1020, N))
p =  N//int(q)
assert p*q == N
ct = 8186060928313885769354678890177557682243935865951044607355407913984325008023920945584264597263280967935647687700160509307248496739812183459202534578939332344555497039192482154454454693724934732638781142024771654013348648642499082193036949224447670228129979969117694429852741589119950416356994348682708492874142284908388037438369140565457777493450830563876462966292265931196660801502516897689751391765960508191378163119544460325276563310085601379452166782817827174037575737698149543116988313259276133731366502857183074145959510154283828002421804046801099174492012965473484884248558140227453340391094943731843975789177925400387372241152019649275229913543341746093922497898052852506478059072063926852811744655816363487222213207012607380600807768746700095000711742158417911014914189846384350955219828625304234335585908586629553669322091907404287881672871559196020118726918498760689771060155092872548879244294864435020178984782336214701184648562640656872682817499577830198899454451313073206095952393321962920998135893517825998093876887649578746492157643662288835198219659831380071029296803325375861569612599236263017093849004643747287733684627207715319677718992651240143169913967935168395366489186566966937247547180974471519149463681658482888358647047732895140992448097194799647921341157359477446581957560470722768846517984790535992021835977395036158326701392179053937952571207909055715251527231322810604942413763079355245377398589878159300812170976867101293252357533892366317940408665645988986718205869624564467875454218834820947331832134901823129740034013675233894409044759249522333893362317760311333958168280681392491183916349698206164724254137294914940030152915293854847041923690214918551522429470782087407403245117503084902852573000228107683470569557444688247627624782025858494228079912779858527726597078426292822549447430014572886118458954202651394
phi = (p-1)*(q-1)
print(long_to_bytes(((int(pow(ct,phi,N^3)-1)//N)*int(inverse_mod(phi,N)))%N))
#b'flag{alw4ys_LLL_109uj98s98121u9hsftyf463dgsydh}'