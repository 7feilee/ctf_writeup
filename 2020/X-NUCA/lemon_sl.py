# coding = utf-8

from pwn import *
from Crypto.Cipher import AES
from Crypto.Util.number import long_to_bytes
import gmpy2

context.log_level = "debug"

e_list = [5,
65537,
1139,
2021,
3,
1837,
65537,
11837,
5,
65537,
3]

n_list = [
20085052568147852471598372473264470697501771045504619616815664340999013414731478046362868365124727144304081259571201782408267159665245935237162159608435947430737456955535474594067900372529525638347834606321764494440201214634638809372393468248308521630529738581356863306630283307602547122404113808731591325535744285179868660528920057135055897892070148225358532138900282874490456210417764287147069279156948048712341156640337528949959575880557144190474916830647897584962291970788159105496656907288030013941266575915074489600920916943672459704257586206835864238818672075148783348547953164447964668921802373169604302686933,
16390682411951886186754084830985815576514032551945935370214767316202786788456760249459583233006617226228898431328519313108107957269240214770761882485091289625201385684462162988471186830340271753279372700307792303218231989177086880771431657602972879684684557932179570958044801544854166159074548204902813004667294600211728245424460590126879380427718624966744496952633572298765498600320167928489773272459565467377929012521155912401667871939984682411640505943621202594158284323446157332953067228687140784752595663577386067830947300478542823522576114195984382242946334498839697115237205030298204993018467751106463742599521,
27223099151900817063723439208481502144343560862477235015656641855026658236766847518312965884879375243003908810914771674726063403882631743956749779703420376347276354631977614751134501757729843066055071921909229584182450141239154208502663664191310714281143464752380740623319216688797023520420820108977773518501075204075649879888822500752758280292187851252990885265186595847888709247463638243479263073473653427597278570378674589626698569223043265892178744179376067235076502125095751808419448005171484228564018699255972680551607768558546679067081419177764516807408156848431240778744186927133753209269434808955842360325427,
13920050490293275240097109280896002309882326814413820013531762864744051151653887332274465367675374516171998790202567544463896400595922935103827133493367058387603156591186814003468271688840389984614393541598488081923876117278640011568112751472697603586387948788918075929709442323053765413673858142845730496904984015304227584643289329258431669274559992931942094759967803205522074898153367220469028328161228631778846507071969483907349942608002296151867143721506376160216282169682759863155103163337406542547542142928164476040864582057334267736209585832450468148706621332001720950833890399733719383394810342654732054355389,
14997542113406768800262678505698042231725368800111192297560877909705726911475152599429392736686969892190195670386428972855885315614329354858473477501508300293523006439107979887199071490028214205821218564924253328997461796380587296047470618750003565547785407726995876036010543676996107754948238641655104123670218140662697999823305269550762812223354423846152239470243995129752896219954738655329734481457632768847367494470259606805806899018576611686776852948262954595696659027752797538379698800803646301498698072329856608541154516867241749183948656225641988256738626835270975304771386823069129815908679173533537667236143,
18362679982654523311938247145266871122744447710761620235580571692812080931557822621328180078203133931777374433047065440858793026241162107502311963073430643550580057412762117200360003740045243710390287116208167945382111480786353263759974834183458715125369681143195867579759948366146094965595943426926043495458417195106318338470592639995373918953846168995314435583425560638317765718727988270821896599672264575657804250470222074008356753774231525313345255524883395902142788253692262687636197759444969752014799585208746579523020217320467274265220111297976902003900400102255879460568922366275944992711977473268709886211869,
20232725947908821183656155653495442327543980222068788212842702072213986635220978050405469732156316838184133620561244944416757518767167623675915104530277819923206332200023713983104410727240731307864662180820191563236130497980613873248108313207869136118066370471208740451943705560379551546259646295615671355463345912902611054028024982110404771112157357830200209216795112290774239945772914371494153430737971226257170457462914538984096942296432352537973187864499991789992201406712680092440631549833372792813875500588946495446289265095925034132994248252130459346887208652121143161633122018851224291343054209109646820437007,
10168641632499931313599418280467059602279446328885639224864055792713346564433152362171462706880506167520232928684723554106293258933265582467134023192616783048462380188251691060554365350954929029856834489921831153821846252979755748755029190830564192715710244634825386121760968289631909772235470206250133776790190034144266455864783140594766630676150283716104679320400428773991422403321984722012660544270973220008622791160014253905504914275349327215622932418605749397880287808711842334714464023882748158069796909674625327892781808394281008584792941134746411692079469295028346075197306271518140064201281162246772675091173,
20339138091988605169748601621008581098067312915335702741683296848558869639640663577561981959892534294012881404066776126420540048242943522333212661657625949296866970422290745905383027223586050071349805123795608957724989346831043592969420474790289005033336710623464679561251449642764506177316592802980705340326133484089235877553372126333478255030354608441128688803591646005916097124691097190570648927691266100757932307181010470351134974167972469127641279004889721290982067039643588857026878737085463921965890749980726920098705496419398797798219484586719816259278568902544540412113263722262547692467979405080010610037873,
22376268675053065467497277870913336477066494045667012766150716306233301611894798541036002001261864354299352862407850002106262794736723164891579180208363615097717426403635378405030789864583422243435210695536395185682932041139025801021115082818937231210257716638257295622683644088592889773753878686396511613719041254517335198685699920627571746743821296368864570680272046772912317343830696160010470942668000230252416502322890176263678348730171241196578082007809329302665442490311777981270656271478576371999109256278402146680031726780306806551941688447439518866585520001186921117067680021413550441943970461816204663267227,
12967959209067922454945251236897307909017233329152956123986340335469496214323692845445549614575661485498606365336104156968021893730938954455773203169332047024104889317141913384516037023463537387481180221013451642974120862473292679256290365788499008038196934935329279303392188972626528651856312570866775813560195950533727183158759728123282543351841799012242383408270806584497431938765912154113625657648218078384169657726055088022264250182646362174577072362455400480811157058303550311067133355599577710702917264938131011140879081322149967649896436577287555752517161823226931830440812245959346323636803069058207871186621,
]
p = process("./lemonade")

def mode_1():
    p.sendlineafter(b">", b"1")
    flag_enc = p.recvline().decode().strip()
    return long_to_bytes(int(flag_enc,16))

def mode_2():
    p.sendlineafter(b">", b"2")
    '''
    import tty
    p.send(chr(tty.CEOF)) #\x04 this only work on process("./program"), not work on sockets  Ctrl-D)
    #https://stackoverflow.com/questions/4160347/close-vs-shutdown-socket
    '''
    p.shutdown(direction="send") #socket send EOF close the tube for futher reading or writing depending on `direction`
    key_enc_e8 = int(p.recvline().decode().strip(),16)
    key_enc_e10 = int(p.recvline().decode().strip(),16)
    return key_enc_e8
def mode_3():
    p.sendlineafter(b">", b"3")
    key_enc_e1 = p.recvline().decode().strip()
    return int(key_enc_e1,16)

from functools import reduce
def crt(n_list, a_list):
    rst = 0
    prod = reduce(lambda a, b:a*b,n_list)
    for n_i, a_i in zip(n_list,a_list):
        p = prod//n_i
        rst+=a_i*int(gmpy2.invert(p,n_i))*p
    return int(rst%prod)

flag_enc = mode_1()
key_enc_e1 = mode_3()
key_enc_e8 = mode_2()

p.close()

key5 = crt([n_list[0],n_list[8]],[key_enc_e1,key_enc_e8])
key = long_to_bytes(int(gmpy2.iroot(key5,5)[0]))[:32]
cipher= AES.new(key,AES.MODE_ECB)
print(cipher.decrypt(flag_enc))

